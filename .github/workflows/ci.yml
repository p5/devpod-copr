name: CI

on:
    pull_request:
    push:
        branches:
            - main

jobs:
    compare:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            pull-requests: write
        steps:
            - name: Checkout Original Branch
              uses: actions/checkout@v4
              with:
                ref: ${{ github.event.pull_request.base.sha }}

            - name: Extract Version from Spec
              run: |
                # Read contents of devpod.spec and extract version.
                VERSION=$(grep -oP '(?<=Version: ).*' devpod.spec | tr -d '[:space:]')
                echo "Version: $VERSION"
                echo "CURRENT_VERSION=$VERSION" >> $GITHUB_ENV
            
            - name: Checkout PR Branch
              uses: actions/checkout@v4
              with:
                ref: ${{ github.event.pull_request.head.sha }}

            - name: Extract Version from Spec
              run: |
                # Read contents of devpod.spec and extract version
                VERSION=$(grep -oP '(?<=Version: ).*' devpod.spec | tr -d '[:space:]')
                echo "Version: $VERSION"
                echo "PR_VERSION=$VERSION" >> $GITHUB_ENV

            - name: Download Versions
              env:
                CURRENT_VERSION: ${{ env.CURRENT_VERSION }}
                PR_VERSION: ${{ env.PR_VERSION }}
              run: |
                # Download the release artifact from loft-sh/devpod releases
                curl -Lo current.tar.gz https://github.com/loft-sh/devpod/releases/download/$CURRENT_VERSION/DevPod_linux_x86_64.tar.gz
                curl -Lo new.tar.gz https://github.com/loft-sh/devpod/releases/download/$PR_VERSION/DevPod_linux_x86_64.tar.gz

            - name: Extract Versions
              run: |
                # Extract the downloaded artifacts to /tmp/(old|new)
                mkdir -p /tmp/old /tmp/new
                tar -xzf current.tar.gz -C /tmp/old
                tar -xzf new.tar.gz -C /tmp/new
                rm /tmp/new/usr/bin/dev-pod
            
            - name: Compare Contents
              run: |
                # Check if files have been added or removed.  Do not check for changes to file contents, just the presence of files.
                # Store added files in ADDED_FILES, removed files in REMOVED_FILES
                DIFF_RESULT=$(diff -rq /tmp/old /tmp/new)
                ADDED_FILES=$(echo "$DIFF_RESULT" | awk '/^Only in \/tmp\/new/ {print $4}')
                REMOVED_FILES=$(echo "$DIFF_RESULT" | awk '/^Only in \/tmp\/old/ {print $4}')
                echo "ADDED_FILES=$ADDED_FILES"
                echo "REMOVED_FILES=$REMOVED_FILES"
                echo "ADDED_FILES=$ADDED_FILES" >> $GITHUB_ENV
                echo "REMOVED_FILES=$REMOVED_FILES" >> $GITHUB_ENV

            - name: Comment Changes
              uses: actions/github-script@v4
              if: ${{ env.ADDED_FILES != '' || env.REMOVED_FILES != '' }}
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  const { ADDED_FILES, REMOVED_FILES } = process.env;
                  const body = `## Changes in this PR
                  ${ADDED_FILES != '' ? `### Added Files
                  ${ADDED_FILES.split('\n').map(file => `- ${file}`).join('\n')}` : ''}
                  ${REMOVED_FILES != '' ? `### Removed Files
                  ${REMOVED_FILES.split('\n').map(file => `- ${file}`).join('\n')}` : ''}
                  `;
                  github.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body
                  })
